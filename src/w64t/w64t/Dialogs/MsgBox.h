/*
*           Win64Tools (c) Copyright 2022 by Ludwig Füchsl
*
*
* Boost Software License - Version 1.0 - August 17th, 2003
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (the "Software") to use, reproduce, display, distribute,
* execute, and transmit the Software, and to prepare derivative works of the
* Software, and to permit third-parties to whom the Software is furnished to
* do so, all subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "DialogBase.h"

#include <type_traits>
#include <string>
#include <sstream>

#ifndef W64T_DIALOGS_MSGBOX_DEFAULT_CHAR
#define W64T_DIALOGS_MSGBOX_DEFAULT_CHAR char
#endif

#ifndef W64T_DIALOGS_MSGBOX_DEFAULT_CLASS
#define W64T_DIALOGS_MSGBOX_DEFAULT_CLASS MsgBox_StdSStream
#endif

namespace w64t::dialogs
{
    // Message box
    template<typename T = char, typename = std::enable_if_t<std::is_same_v<T, char> || std::is_same_v<T, wchar_t>>>
    class MsgBox_Base : public DialogBase
    {
        public:
            // Presents the dialog
            DialogResult ShowDialog() override
            {
                // Build type
                UINT type = 0;

                // Icon
                switch (Icon)
                {
                    case DialogIcon::Asterisk: type |= MB_ICONASTERISK; break;
                    case DialogIcon::Error: type |= MB_ICONERROR; break;
                    case DialogIcon::Exclamation: type |= MB_ICONEXCLAMATION; break;
                    case DialogIcon::Hand: type |= MB_ICONHAND; break;
                    case DialogIcon::Information: type |= MB_ICONINFORMATION; break;
                    case DialogIcon::Question: type |= MB_ICONQUESTION; break;
                    case DialogIcon::Stop: type |= MB_ICONSTOP; break;
                    case DialogIcon::Warning: type |= MB_ICONWARNING; break;
                }

                // Buttons
                if (Buttons == DialogButtons{ DialogButton::Abort, DialogButton::Retry, DialogButton::Ignore })
                    type |= MB_ABORTRETRYIGNORE;
                else if (Buttons == DialogButtons{ DialogButton::Cancle, DialogButton::Retry, DialogButton::Continue })
                    type |= MB_CANCELTRYCONTINUE;
                else if (Buttons == DialogButtons{ DialogButton::OK })
                    type |= MB_OK;
                else if (Buttons == DialogButtons{ DialogButton::OK, DialogButton::Cancle })
                    type |= MB_OKCANCEL;
                else if (Buttons == DialogButtons{ DialogButton::Retry, DialogButton::Cancle })
                    type |= MB_RETRYCANCEL;
                else if (Buttons == DialogButtons{ DialogButton::Yes, DialogButton::No })
                    type |= MB_YESNO;
                else if (Buttons == DialogButtons{ DialogButton::Yes, DialogButton::No, DialogButton::Cancle })
                    type |= MB_YESNOCANCEL;

                // Default button
                if (DefaultButton)
                {
                    switch (DefaultButton)
                    {
                        case 1: type |= MB_DEFBUTTON1; break;
                        case 2: type |= MB_DEFBUTTON2; break;
                        case 3: type |= MB_DEFBUTTON3; break;
                        case 4: type |= MB_DEFBUTTON4; break;
                    }
                }

                // Show MessageBox
                int winResult = ShowMessageBox(Parent, GetText(), GetTitle(), type);
                switch (winResult)
                {
                    case IDABORT: Result = DialogResult::Abort; break;
                    case IDCANCEL: Result = DialogResult::Cancle; break;
                    case IDCONTINUE: Result = DialogResult::Continue; break;
                    case IDIGNORE: Result = DialogResult::Ignore; break;
                    case IDNO: Result = DialogResult::No; break;
                    case IDOK: Result = DialogResult::OK; break;
                    case IDRETRY: Result = DialogResult::Retry; break;
                    case IDTRYAGAIN: Result = DialogResult::TryAgain; break;
                    case IDYES: Result = DialogResult::Yes; break;
                }

                // Return return 
                return Result;
            }

        private:
            // MessageBox helpers
            inline int ShowMessageBox(HWND wnd, LPCSTR text, LPCSTR caption, UINT type)
            {
                return MessageBoxA(wnd, text, caption, type);
            }
            inline int ShowMessageBox(HWND wnd, LPCWSTR text, LPCWSTR caption, UINT type)
            {
                return MessageBoxW(wnd, text, caption, type);
            }

        private:
            // Interface to retrieve the title and text
            virtual const T* GetTitle() noexcept = 0;
            virtual const T* GetText() noexcept = 0;

        public:
            // Default button (0 - None, 1 ... 4)
            unsigned int DefaultButton = 0;
            // Parent window of MessageBox
            HWND Parent = nullptr;
    };

    // C-String message box
    template<typename T = char, typename = std::enable_if_t<std::is_same_v<T, char> || std::is_same_v<T, wchar_t>>>
    class MsgBox_CStr : public MsgBox_Base<T>
    {
        private:
            const T* GetTitle() noexcept override
            {
                return Title;
            }
            const T* GetText() noexcept override
            {
                return Text;
            }

        public:
            // MessageBox content
            const T* Title = nullptr;
            const T* Text = nullptr;
    };

    // std::string message box
    template<typename T = char, typename = std::enable_if_t<std::is_same_v<T, char> || std::is_same_v<T, wchar_t>>>
    class MsgBox_StdStr : public MsgBox_Base<T>
    {
        private:
            const T* GetTitle() noexcept override
            {
                return Title.c_str();
            }
            const T* GetText() noexcept override
            {
                return Text.c_str();
            }

        public:
            // MessageBox content
            std::basic_string<T> Title;
            std::basic_string<T> Text;
    };

    // std::stringsteam message box
    template<typename T = char, typename = std::enable_if_t<std::is_same_v<T, char> || std::is_same_v<T, wchar_t>>>
    class MsgBox_StdSStream : public MsgBox_Base<T>
    {
        private:
            const T* GetTitle() noexcept override
            {
                m_CacheTitle = Title.str();
                return m_CacheTitle.c_str();
            }
            const T* GetText() noexcept override
            {
                m_CacheText = Text.str();
                return m_CacheText.c_str();
            }

        private:
            // Store intermediate strings
            std::basic_string<T> m_CacheTitle;
            std::basic_string<T> m_CacheText;

        public:
            // MessageBox content
            std::basic_stringstream<T> Title;
            std::basic_stringstream<T> Text;
    };

    // Typedef default MessageBox
    typedef W64T_DIALOGS_MSGBOX_DEFAULT_CLASS<W64T_DIALOGS_MSGBOX_DEFAULT_CHAR> MsgBox;
    typedef W64T_DIALOGS_MSGBOX_DEFAULT_CLASS<char> MsgBoxA;
    typedef W64T_DIALOGS_MSGBOX_DEFAULT_CLASS<wchar_t> MsgBoxW;
}
